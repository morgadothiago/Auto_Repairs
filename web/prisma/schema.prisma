generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ─────────────────────────────
//   MODELO DE USUÁRIO
// ─────────────────────────────
//

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  role         Role           @default(USER)
  appointments Appointments[]

  // Relação inversa para Services que o usuário realizou
  performedServices Services[] @relation(name: "PerformedServices")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Leeads {
  id          String   @id @default(uuid())
  name        String
  phone       String
  email       String
  model       String
  plate       String
  year        Int
  serviceType String
  date        DateTime
  role        Role     @default(ADMIN)

  // Se o lead foi convertido em agendamento
  converted Boolean @default(false)

  // Relacionamento com Agendamentos
  appointments Appointments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointments {
  id          String   @id @default(uuid())
  name        String
  phone       String
  email       String
  model       String
  plate       String
  year        Int
  serviceType String
  date        DateTime

  // Relacionamento com usuário
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Relacionamento com Lead
  leadId String?
  lead   Leeads? @relation(fields: [leadId], references: [id])

  // Confirmação
  confirmationStatus ConfirmationStatus @default(PENDING)
  confirmedAt        DateTime?

  // Histórico de confirmações (opcional)
  confirmations AppointmentConfirmation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppointmentConfirmation {
  id            String             @id @default(uuid())
  appointmentId String
  appointment   Appointments       @relation(fields: [appointmentId], references: [id])
  status        ConfirmationStatus
  confirmedBy   String?
  createdAt     DateTime           @default(now())
}

enum ConfirmationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Clients {
  id    String @id @default(uuid())
  name  String
  phone String
  email String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação inversa para Services
  services Services[]
}

model Vehicles {
  id    String @id @default(uuid())
  model String
  year  Int
  plate String
  email String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação inversa para Services
  services Services[]
}

model Services {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float

  // Relacionamento com Cliente
  clientId String
  client   Clients @relation(fields: [clientId], references: [id])

  // Relacionamento com Veículo
  vehicleId String
  vehicle   Vehicles @relation(fields: [vehicleId], references: [id])

  // Relacionamento com o Usuário que realizou o serviço
  performedByUserId String
  performedByUser   User   @relation(fields: [performedByUserId], references: [id], name: "PerformedServices")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
